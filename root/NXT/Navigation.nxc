#include "MCTasks.nxc"
#include "Convert.nxc"

#define MOVE_INCREMENT 100
#define POWER 100

// Waits for the motors to be ready
inline void WaitForMotors()
{
 while(!IsMotorReady(0) || !IsMotorReady(1) || !IsMotorReady(3))
 {
 }
}

// Drives the robot forward the specified distance in MM with the specified power (-100 to 100)
sub RunForward( int power, float distance)
{
 WaitForMotors();
 float degrees = ConvertMMToMotorDegrees(distance);
 Run(3, -power, degrees);
}

// Drives the robot backward the specified distance in MM with the specified power (-100 to 100)
sub RunBackward( int power, float distance)
{
 WaitForMotors();
 float degrees = ConvertMMToMotorDegrees(distance);
 Run(3, power, degrees);
}

// Turns the robot the specified number of degrees counterclockwise with the specified power
sub TurnLeft(int power, float angle)
{
 WaitForMotors();
 float distance = AngleToDistance(angle);
 float degrees =ConvertMMToMotorDegrees(distance);
 Run(0, power, degrees);
 Run(1,-power,degrees);
}

// Turns the robot the specified number of degrees clockwise with the specified power
sub TurnRight(int power, float angle)
{
 WaitForMotors();
 float distance = AngleToDistance(angle);
 float degrees =ConvertMMToMotorDegrees(distance);
 Run(1, power, degrees);
 Run(0,-power,degrees);
}

//Calculates the polar coordinate from the robot to the target in a coordinate system
//with the robot direction as the polar axis.
inline PolarCoordinate NavigateToPoint(Pose robot, Point target)
{
 PolarCoordinate c = ConvertCarthesianToPolar(robot.p,target);
 
 float angle = FindAngleToPoint(robot.angle, c.angle);
 PolarCoordinate nav;
 nav.length = c.length;
 nav.angle = angle;
 
 return nav;
}

//Turns the robot the specified angle
void TurnAngle(float angle)
{
 TextOut(0, LCD_LINE5, NumToStr(angle));
 if(angle > 0)
  TurnRight(POWER,angle);
 else
  TurnLeft(POWER, -angle);
}

//The robot queries its position and drives a small increment in that direction
// MOVE_INCEREMENT determines the size of the increment (in mm)
bool GotoPointIncrement(Point target)
{
 //Where am i
 Pose p = WhereAmI();
 PolarCoordinate c = NavigateToPoint(p, target);
 TurnAngle(c.angle);
 
 if(c.length > MOVE_INCREMENT)
 {
  RunForward(POWER,MOVE_INCREMENT);
  return false;
 }
 else
 {
  RunForward(POWER,c.length);
  return true;
 }
}

//Instructs the robot to move to the specified point
void GotoPoint(Point target)
{
 bool isThere = false;
 while(!isThere)
 {
 isThere = GotoPointIncrement(target);
 }
 IAmThere();
}

//Main function that tests all functions in this file
#ifdef debug
task main()
{
 // Don't forget this!
 InitSpeedFromPosLUT();

 RunBackward(POWER,200);
 TurnLeft(POWER,180);
 RunForward(POWER,200);
 TurnRight(POWER,180);
}
#endif

#ifdef debug2
task main()
{
 InitSpeedFromPosLUT();
 Point p;
 p.x = -200;
 p.y = 200;
 
  Point s;
 s.x = 200;
 s.y = 200;
 
 Point t;
 t.x = 0;
 t.y = 200;
 
 
 GotoPoint(p);
 GotoPoint(s);
 GotoPoint(t);
}
#endif
