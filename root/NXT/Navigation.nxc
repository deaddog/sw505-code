#include "MCTasks.nxc"
#include "Convert.nxc"

#define MOVE_INCREMENT 100
// Waits for the motors to be ready
inline void WaitForMotors()
{
 while(!IsMotorReady(0) || !IsMotorReady(1) || !IsMotorReady(3))
 {
 }
}

// Drives the robot forward the specified distance in MM with the specified power (-100 to 100)
sub RunForward( int power, float distance)
{
 WaitForMotors();
 float degrees = ConvertMMToMotorDegrees(distance);
 Run(3, -power, degrees);
}

// Drives the robot backward the specified distance in MM with the specified power (-100 to 100)
sub RunBackward( int power, float distance)
{
 WaitForMotors();
 float degrees = ConvertMMToMotorDegrees(distance);
 Run(3, power, degrees);
}

// Turns the robot the specified number of degrees counterclockwise with the specified power
sub TurnLeft(int power, float angle)
{
 WaitForMotors();
 float distance = AngleToDistance(angle);
 float degrees =ConvertMMToMotorDegrees(distance);
 Run(0, power, degrees);
 Run(1,-power,degrees);
}

// Turns the robot the specified number of degrees clockwise with the specified power
sub TurnRight(int power, float angle)
{
 WaitForMotors();
 float distance = AngleToDistance(angle);
 float degrees =ConvertMMToMotorDegrees(distance);
 Run(1, power, degrees);
 Run(0,-power,degrees);
}

inline PolarCoordinate NavigateToPoint(Pose robot, Point target)
{
 PolarCoordinate c = ConvertCarthesianToPolar(robot.p,target);
 
 float angle = FindAngleToPoint(robot.angle, c.angle);
 TextOut(0,LCD_LINE1,StrCat(NumToStr(c.angle), " ", NumToStr(angle)));
 PolarCoordinate nav;
 nav.length = c.length;
 nav.angle = angle;
 
 return nav;
}

void TurnAngle(float angle)
{
 TextOut(0,LCD_LINE2,NumToStr(angle));
 if(angle > 0)
  TurnRight(100,angle);
 else
  TurnLeft(100, -angle);
}


Pose WhereDummy()
{
  Pose pos;
  
  pos.p.x = 0;
  pos.p.y = 0;
  pos.angle = 90;
  
  return pos;
}

bool GotoPointIncrement(Point target)
{
 //Where am i
 Pose p = WhereDummy();
 PolarCoordinate c = NavigateToPoint(p, target);
 TurnAngle(c.angle);
 
 if(c.length > MOVE_INCREMENT)
 {
  RunForward(100,MOVE_INCREMENT);
  return false;
 }
 else
 {
  RunForward(100,c.length);
  return true;
 }
}

void GotoPoint(Point target)
{
 bool isThere = false;
 while(!isThere)
 {
  isThere = GotoPointIncrement(target);
 }
}

//Main function that tests all functions in this file
#ifdef debug
task main()
{
 // Don't forget this!
 InitSpeedFromPosLUT();

 RunBackward(100,200);
 TurnLeft(100,180);
 RunForward(100,200);
 TurnRight(100,180);
 //Run(2,100,150);
}
#endif

task main()
{
 InitSpeedFromPosLUT();
 Point p;
 p.x = -200;
 p.y = 200;
 
  Point s;
 s.x = 200;
 s.y = 200;
 
 Point t;
 t.x = 0;
 t.y = 200;
 
 
 GotoPoint(p);
 GotoPoint(s);
 GotoPoint(t);
}
