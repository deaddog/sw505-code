//INCOMING COMMANDS FROM MINDSQUALLS
#define INCOMING_MOVE_TO_POS 0
#define INCOMING_GET_SENSOR_MEASUREMENT 1

//OUTGOING COMMANDS TO BE RECEIVED BY MINDSQUALLS
#define OUTGOING_WHERE_AM_I 0
#define OUTGOING_I_AM_THERE 1

//MAILBOXES TO BE USED FOR INCOMING AND OUTGOING COMMANDS
#define INBOX           1
#define OUTBOX          0

#include "Structs.nxc"
#include "Communication.nxc"
#include "Navigation.nxc"
#include "Sensor.nxc"

task main(){
     // Don't forget this!
     InitSpeedFromPosLUT();

     // Setup for later use
     string in = "";
     string cmd = "";
     string args = "";
     byte cmdType;

     // clear mailboxes
     in = "...";
     while(StrLen(in) > 0) {
         ReceiveRemoteString(INBOX, true, in);
     }
     in = "...";
     while(StrLen(in) > 0) {
         ReceiveRemoteString(OUTBOX, true, in);
     }

     in = "";
     
     while(true){
          //Check inbox for new commands
          ReceiveRemoteString(INBOX, true, in);
          
          //If there is a command, convert to int and do switch
          //  else reset loop
          if (StrLen(in) > 0){
             cmd = SubStr(in, 0, 1);
             cmdType = StrToNum(cmd);
             args = SubStr(in, 1, StrLen(in)-1);
             
             //For the rotating of the sensor
             bool clockwise = true;
             switch(cmdType){
                 case INCOMING_MOVE_TO_POS:
                 //Placeholder for command "goto"
                 string x = SubStr(in, 1, 7);
                 string y = SubStr(in, 8, 7);

                 Point p;
                 p.x = StrToNum(x);
                 p.y = StrToNum(y);

                 ClearScreen();
                 TextOut(0, LCD_LINE1, "Going to:");
                 TextOut(2, LCD_LINE2, "x:" + NumToStr(p.x));
                 TextOut(2, LCD_LINE3, "y:" + NumToStr(p.y));

                 GotoPoint(p);
                 
                 break;
                 
                 case INCOMING_GET_SENSOR_MEASUREMENT :
                 
                 string s = "";
                 byte data[2];
                 
                 for(i=0;i<2;i++)
                 {
                  if(clockwise)
                  {
                  s = rotate_and_measure(clockwise);
                  clockwise = false;
                  SendResponseString(OUTBOX,s);
                  s="";
                  }
                  else
                  {
                  s = rotate_and_measure(clockwise);
                  SendResponseString(OUTBOX,s);
                  clockwise = true;
                  }
                 }
                 break;

             }//end switch cmdtype
             
             in = "";
             args = "";
          }//end if strlen in
          
          if (ButtonPressed(BTNCENTER, false)) {
            // release all motors
            MotorOff(OUT_A);
            MotorOff(OUT_B);
            MotorOff(OUT_C);
            PlayTone(440, 500);
            Wait(100);

            // release all motors again
            MotorOff(OUT_A);
            MotorOff(OUT_B);
            MotorOff(OUT_C);

            TextOut(5,LCD_LINE7, "EMERGENCY STOP    ", false);
            TextOut(2,LCD_LINE8, "Restart program!  ", false);
            Wait(2500);
            StopAllTasks();
          }//end if buttenpressed
     }//end while true
}//end task main
