//These functions are used for converting  numbers for use when navigating
//Including:
//  converting a distance in MM to a number of degrees to turn the motor
//  converting coordinates to polar coordinates for navigating the robot

typedef struct {
float x;
float y;
} Point;

typedef struct{
 Point p;
 float angle;
} Position;

typedef struct{
float length;
float angle;
} PolarCoordinate;


float NUMBER_OF_TEETH_ON_MOTOR_DRIVEGEAR = 16;
float NUMBER_OF_TEETH_ON_MOTOR_FOLLOWERGEAR = 40;
float WHEEL_RADIUS_IN_MM = 28;
float WHEEL_AXEL_LENGTH_IN_MM =162;
int DEGREES_IN_CICLE =360;
#define MOTOR_RATIO NUMBER_OF_TEETH_ON_MOTOR_FOLLOWERGEAR / NUMBER_OF_TEETH_ON_MOTOR_DRIVEGEAR

//Converts a number of degrees to the corresponding number of degrees on the motor
//with the gearing taken into account
inline float ConvertActualDegreesToMotorDegrees(int degreesToTurn, float gearRatio)
{
 return (degreesToTurn * gearRatio);
}

//Converts the specified number of MM to a number of degrees to turn the motor
inline float ConvertMMToMotorDegrees(float distance)
{
 float motordegrees = ConvertActualDegreesToMotorDegrees(DEGREES_IN_CICLE, MOTOR_RATIO);
 TextOut(0,LCD_LINE1, NumToStr(motordegrees));
 float degrees = ((motordegrees / (WHEEL_RADIUS_IN_MM * 2.0 * PI)) * distance);
 TextOut(0,LCD_LINE2, NumToStr(degrees));

 return degrees;
}

//Converts the specified angle to a distance drive the motor
inline float AngleToDistance(float angle)
{
 return ((WHEEL_AXEL_LENGTH_IN_MM * PI) / DEGREES_IN_CICLE) * angle;
}

inline Point MoveRobotToZero(Point robot, Point target)
{
 Point p;
 p.x = target.x - robot.x;
 p.y = target.y - robot.y;
 return p;
}

inline PolarCoordinate ConvertCarthesianToPolar(Point robot, Point target)
{
 Point p = MoveRobotToZero(robot,target);

 float length = sqrt(p.x * p.x + p.y * p.y);
 //float angle = atand(p.y / p.x);
float angle= 0;

 PolarCoordinate c;
 c.length = length;
 c.angle = angle;
 
 return c;
}

//Calculates the angle for the the robot to to when the robot is at angle robotangle
inline float FindAngleToPoint(float robotangle, float targetangle)
{
 return robotangle - targetangle;
}
